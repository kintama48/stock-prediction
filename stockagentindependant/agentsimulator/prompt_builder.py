"\"\"Prompt construction helpers for the stateless agent.\"\"\""

"from __future__ import annotations"

"import json"
"from datetime import date"
"from typing import Dict, Tuple"

"from .market_data import MarketDataBundle"
"from ..constants import DEFAULT_SYMBOLS, SIMULATION_DAYS, TRADING_FEE, CRYPTO_TRADING_FEE"


"SYSTEM_PROMPT = ("
"    \"You are GPT-5, a benchmark trading planner. Always respond with the enforced JSON schema.\""
")"


"def plan_response_schema() -> Dict:"
"    return {"
"        \"type\": \"object\","
"        \"properties\": {"
"            \"plan\": {"
"                \"type\": \"object\","
"                \"properties\": {"
"                    \"target_date\": {\"type\": \"string\", \"format\": \"date\"},"
"                    \"instructions\": {"
"                        \"type\": \"array\","
"                        \"items\": {"
"                            \"type\": \"object\","
"                            \"properties\": {"
"                                \"symbol\": {\"type\": \"string\"},"
"                                \"action\": {\"type\": \"string\", \"enum\": [\"buy\", \"sell\", \"exit\", \"hold\"]},"
"                                \"quantity\": {\"type\": \"number\", \"minimum\": 0},"
"                                \"execution_session\": {\"type\": \"string\", \"enum\": [\"market_open\", \"market_close\"]},"
"                                \"entry_price\": {\"type\": [\"number\", \"null\"]},"
"                                \"exit_price\": {\"type\": [\"number\", \"null\"]},"
"                                \"exit_reason\": {\"type\": [\"string\", \"null\"]},"
"                                \"notes\": {\"type\": [\"string\", \"null\"]},"
"                            },"
"                            \"required\": ["
"                                \"symbol\","
"                                \"action\","
"                                \"quantity\","
"                                \"execution_session\","
"                                \"entry_price\","
"                                \"exit_price\","
"                                \"exit_reason\","
"                                \"notes\","
"                            ],"
"                            \"additionalProperties\": False,"
"                        },"
"                    },"
"                    \"risk_notes\": {\"type\": [\"string\", \"null\"]},"
"                    \"focus_symbols\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},"
"                    \"stop_trading_symbols\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},"
"                    \"execution_window\": {\"type\": \"string\", \"enum\": [\"market_open\", \"market_close\"]},"
"                    \"metadata\": {\"type\": \"object\"},"
"                },"
"                \"required\": [\"target_date\", \"instructions\"],"
"                \"additionalProperties\": False,"
"            },"
"            \"commentary\": {\"type\": [\"string\", \"null\"]},"
"        },"
"        \"required\": [\"plan\"],"
"        \"additionalProperties\": False,"
"    }"


"def build_daily_plan_prompt("
"    market_data: MarketDataBundle,"
"    target_date: date,"
"    symbols=None,"
"    include_market_history: bool = True,"
") -> Tuple[str, Dict]:"
"    symbols = symbols or DEFAULT_SYMBOLS"
"    market_payload = market_data.to_payload() if include_market_history else {\"symbols\": symbols}"

"    prompt = f\"\"\""
"You are devising a one-day allocation for a paper-trading benchmark on {target_date.isoformat()}."

"Context:"
"- Usable symbols: {', '.join(symbols)}."
"- Historical payload contains the last {market_data.lookback_days} trading days of OHLC percent changes per symbol."
"- No prior portfolio exists; propose positions from scratch."
"- Execution windows: `market_open` (09:30 ET) or `market_close` (16:00 ET). Choose one per instruction."
"- Assume round-trip trading fees of {TRADING_FEE:.4%} for equities and {CRYPTO_TRADING_FEE:.4%} for crypto, and keep the plan profitable after fees."

"Structured output requirements:"
"- Follow the schema exactly."
"- Only the keys ``plan`` and ``commentary`` are allowed at the top level."
"- Provide realistic `entry_price` / `exit_price` targets, even if you expect not to trade (use `null`)."
"- Supply `exit_reason` when recommending exits; use `null` otherwise."
"- Return ONLY the JSON objectâ€”no markdown, narrative, or extra fields."
"\"\"\".strip()"

"    user_payload = {"
"        \"market_data\": market_payload,"
"        \"target_date\": target_date.isoformat(),"
"    }"

"    return prompt, user_payload"


"def dump_prompt_package("
"    market_data: MarketDataBundle,"
"    target_date: date,"
"    include_market_history: bool = True,"
") -> Dict[str, str]:"
"    prompt, user_payload = build_daily_plan_prompt("
"        market_data=market_data,"
"        target_date=target_date,"
"        include_market_history=include_market_history,"
"    )"
"    return {"
"        \"system_prompt\": SYSTEM_PROMPT,"
"        \"user_prompt\": prompt,"
"        \"user_payload_json\": json.dumps(user_payload, ensure_ascii=False, indent=2),"
"    }"
